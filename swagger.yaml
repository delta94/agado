swagger: "2.0"
info:
  description: "Agado API"
  version: "1.0.0"
  title: "Agado API"
host: "localhost:3000"
tags:
- name: "general"
  description: "General endpoints"
- name: "user"
  description: "Operations on user"
- name: "hotel"
  description: "Operations on hotel"
- name: "search"
  description: "Searching hotel"
- name: "review"
  description: "Operations on review"
- name: "reservation"
  description: "Operations on reservation"
- name: "request"
  description: "Operations on request"
  
schemes:
- "http"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /ping:
    get:
      tags:
      - "general"
      summary: "Ping the API server"
      description: "Ping the API server (GET version)"
      responses:
        200:
          description: "pong"
    post:
      tags:
      - "general"
      summary: "Ping the API server"
      description: "Ping the API server (POST version)"
      responses:
        200:
          description: "pong"
  /hotel:
    get:
      tags:
      - "hotel"
      summary: "Get hotel by ID"
      description: "Get a hotel's data by specifying an ID"
      operationId: "getHotelById"
      produces:
      - "application/json"
      parameters:
      - name: "hotel_id"
        in: "query"
        description: "A hotel's ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/hotel'
        400:
          description: "Invalid ID"
        404:
          description: "Hotel not found"
    post:
      tags:
      - "hotel"
      security:
        - Bearer: []
      summary: "Create a new hotel"
      description: "Omit review and identification number fields"
      consumes:
        - "application/json"
      parameters:
        - in: body
          name: hotel
          description: hotel to create
          schema:
            $ref: '#/definitions/hotel'
      produces:
        - "application/json"
      responses:
        201:
          description: "hotel created"
          schema:
            type: object
            properties:
              hotel_id:
                type: integer
        400:
          description: "hotel already exists"
    put:
      tags:
      - "hotel"
      security:
        - Bearer: []
      summary: "Update an existing hotel"
      description: "This operation is idempotent. One should provide all data fields except reviews and identification numbers."
      consumes:
        - "application/json"
      parameters:
        - name: hotel_id
          in: "query"
          description: "A hotel's ID"
          required: true
          type: integer
        - in: body
          name: hotel
          description: hotel to create
          schema:
            $ref: '#/definitions/hotel'
      produces:
        - "application/json"
      responses:
        200:
          description: "hotel modified"
          schema:
            type: object
            properties:
              hotel_id:
                type: integer
        404:
          description: "hotel not found"
    delete:
      tags:
      - "hotel"
      security:
      - Bearer: []
      summary: "Delete an existing hotel"
      description: "Delete a hotel specified by an ID"
      parameters:
      - name: hotel_id
        in: "query"
        description: "A hotel's ID"
        required: true
        type: integer
      responses:
        204:
          description: "hotel deleted"
        404:
          description: "hotel not found"
  /hotel/of_user:
    get:
      tags:
      - "hotel"
      summary: "Get hotels managed by a user"
      description: "Specifying a user's ID"
      operationId: "getHotelByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "query"
        description: "A user's ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/hotel'
        400:
          description: "Invalid ID"
  /user:
    get:
      tags:
      - "user"
      security:
        - Bearer: []
      summary: "Get a user's data by ID."
      description: "Password and token will be excluded."
      produces:
      - "application/json"
      parameters:
      - name: user_id
        in: "query"
        description: "A user's ID"
        required: true
        type: integer
      responses:
        200:
          description: "user found"
          schema:
            $ref: '#/definitions/user'
        404:
          description: "user not found"
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "Use this for registration. Omit token and user_id."
      operationId: "createUser"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: body
        name: user
        description: user to create
        schema:
          $ref: '#/definitions/user'
      responses:
        201:
          description: "user created. password field will be excluded"
          schema:
            $ref: '#/definitions/user'
        409:
          description: "user already exists"
    put:
      tags:
      - "user"
      security:
        - Bearer: []
      summary: "Update an existing user"
      description: "This operation is idempotent. One should provide all data field except the password field. If a new password is specified, the user's password will be updated. Omit token and user_id field"
      operationId: "updateUser"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: user_id
        in: "query"
        description: "A user's ID"
        required: true
        type: integer
      - in: body
        name: user
        description: user to create
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: "User modified. Password field will be excluded."
          schema:
            $ref: '#/definitions/user'
    delete:
      tags:
      - "user"
      security:
      - Bearer: []
      summary: "Delete an existing user"
      description: "Delete a user who's identified by an ID"
      parameters:
      - name: user_id
        in: "query"
        description: "A user's ID"
        required: true
        type: integer
      - in: "body"
        name: "user id"
        description: "A user's ID"
        schema:
          type: object
          properties:
            user_id:
              type: number
      produces:
        - none
      responses:
        204:
          description: "user deleted"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Log user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: credentials
        description: the user's credentials
        schema:
          type: object
          required:
            - username
            - password
            - user_type
          properties:
            username:
              type: string
            password:
              type: string
            user_type:
              type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
        401:
          description: "incorrect username or password or user_type"
  /user/logout:
    post:
      tags:
      - "user"
      security:
      - Bearer: []
      summary: "Log out current logged in user session"
      description: ""
      operationId: "logoutUser"
      responses:
        204:
          description: "user logged out"
  /hotel/manager:
    post:
      tags:
      - "hotel"
      summary: "Add a hotel manager to a hotel"
      description: "Can only be operated by a hotel manager."
      security:
      - Bearer: []
      parameters:
        - in: body
          name: hotel manager
          description: new hotel manager's data
          required: true
          schema:
            $ref: "#/definitions/hotel_manager"
      produces:
        - none
      responses:
        201:
          description: "hotel manager created"
        400:
          description: "hotel manager already exists"
    delete:
      tags:
      - "hotel"
      summary: "Remove an existing hotel manager from a hotel"
      description: "Can only be operated by a permitted hotel manager."
      security:
      - Bearer: []
      parameters:
      - name: user_id
        in: "query"
        description: "The manager's ID"
        required: true
        type: integer
      - name: hotel_id
        in: "query"
        description: "The hotel's ID"
        required: true
        type: integer
      produces:
        - none
      responses:
        201:
          description: "hotel manager created"
        400:
          description: "hotel manager already exists"
  /search:
    get:
      tags:
      - "search"
      summary: "Search for hotels which have at least 1 room available for reservation or all hotels"
      description: "Optionally specify both checkin and checkout datetime to filter hotels. This service will return all hotels otherwise."
      parameters:
      - name: checkin
        in: "query"
        description: "Checkin time"
        required: false
        type: "string"
      - name: checkout
        in: "query"
        description: "Checkout time"
        required: false
        type: "string"
      produces:
        - 'application/json'
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/hotel'
  /review:
    get:
      tags:
      - "review"
      summary: "Get the review written to a hotel by a user"
      security:
      - Bearer: []
      parameters:
      - name: hotel_id
        in: "query"
        description: "ID of the hotel"
        required: true
        type: integer
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/review'
        404:
          description: "review not found"
    post:
      tags:
      - "review"
      summary: "Create a review for a hotel"
      security:
      - Bearer: []
      parameters:
      - in: body
        name: review
        description: Omit review_id
        required: true
        schema:
          $ref: "#/definitions/review"
      responses:
        200:
          description: "sucessful operation"
    put:
      tags:
      - "review"
      summary: "Edit a review of a hotel"
      security:
      - Bearer: []
      parameters:
      - in: body
        name: review
        description: Omit review_id
        required: true
        schema:
          $ref: "#/definitions/review"
      responses:
        200:
          description: "sucessful operation"
        404:
          description: "review not found"
    delete:
      tags:
      - "review"
      summary: "Delete a review"
      security:
      - Bearer: []
      parameters:
      - name: review_id
        in: "query"
        description: "ID of the review"
        required: true
        type: integer
      responses:
        200:
          description: "sucessful operation"
        404:
          description: "review not found"
  /review/of_user:
    get:
      tags:
      - "review"
      summary: "Find all reviews written by a user"
      parameters:
      - name: user_id
        in: "query"
        description: "ID of the user"
        required: true
        type: integer
      produces:
        - 'application/json'
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/review'
  /review/of_hotel:
    get:
      tags:
      - "review"
      summary: "Find all reviews written to a hotel"
      parameters:
      - name: hotel_id
        in: "query"
        description: "ID of the hotel"
        required: true
        type: integer
      produces:
        - 'application/json'
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/review'
  /reservation:
    get:
      tags:
      - "reservation"
      summary: "Find a user's reservations"
      security:
      - Bearer: []
      produces:
      - "application/json"
      responses:
        200:
          description: reservations
          schema:
            type: array
            items:
              $ref: '#/definitions/reservation'
    post:
      tags:
      - "reservation"
      summary: "Reserve hotel rooms"
      description: "Omit reservation_id"
      security:
      - Bearer: []
      parameters:
      - in: body
        name: reservation
        description: Omit reservation_id
        required: true
        schema:
          $ref: "#/definitions/reservation"
      responses:
        200:
          description: successful operation
    delete:
      tags:
      - "reservation"
      summary: "Delete a reservation"
      security:
      - Bearer: []
      parameters:
      - name: reservation_id
        in: "query"
        description: "ID of the reservation"
        required: true
        type: integer
      produces:
        - 'application/json'
      responses:
        200:
          description: "successful operation"
  /reservation/of_hotel:
    get:
      tags:
      - "reservation"
      summary: "Find all reservations of a hotel"
      security:
      - Bearer: []
      parameters:
      - name: hotel_id
        in: "query"
        description: "ID of the hotel"
        required: true
        type: integer
      produces:
      - "application/json"
      responses:
        200:
          description: reservations
          schema:
            type: array
            items:
              $ref: '#/definitions/reservation'
  /request:
    get:
      tags:
      - "request"
      summary: "Check if the user has already sent a request to manage a hotel with hotel_id"
      description: "If hotel_id is not supplied, return the requests sent to the hotel which the user identified by the token is managing."
      security:
      - Bearer: []
      parameters:
      - name: hotel_id
        in: "query"
        description: "ID of the hotel"
        required: false
        type: integer
      responses:
        200:
          description: reservations
          schema:
            type: array
            items:
              $ref: '#/definitions/request'
        404:
          description: No request has been made.
    post:
      tags:
      - "request"
      summary: "Create a new request to manage a hotel"
      security:
      - Bearer: []
      parameters:
      - in: body
        name: request
        description: "Omit request_id and user_id"
        required: true
        schema:
          $ref: '#/definitions/request'
      responses:
        200:
          description: seccessful operation
    delete:
      tags:
      - "request"
      summary: "Cancel a request to manage a hotel"
      security:
      - Bearer: []
      parameters:
      - name: request_id
        in: "query"
        description: "ID of the request"
        required: true
        type: integer
      responses:
        200:
          description: successful operation
        404:
          description: No request found
definitions:
  user:
    properties:
      user_id:
        type: integer
      user_type:
        type: string
      username:
        type: string
      password:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      gender:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      phone_num:
        type: string
      img:
        type: string
      token:
        type: string
  review:
    properties:
      review_id:
        type: integer
      hotel_id:
        type: integer
      user_id:
        type: integer
      title:
        type: string
      comment:
        type: string
      rating:
        type: integer
      date:
        type: string
  hotel:
    properties:
      hotel_id:
        type: integer
      name:
        type: string
      city:
        type: string
      address:
        type: string
      desc:
        type: string
      imgs:
        type: array
        items:
          type: string
      managers:
        type: array
        items:
          $ref: '#/definitions/user'
      reviews:
        type: array
        items:
          $ref: '#/definitions/review'
  hotel_manager:
    properties:
      hotel_id:
        type: integer
      user_id:
        type: integer
  hotel_room:
    properties:
      hotel_id:
        type: integer
      room_id:
        type: integer
      name:
        type: string
      num_bed:
        type: integer
      max_person:
        type: integer
      price:
        type: number
      total_room:
        type: integer
      amenities:
        type: array
        items:
          type: integer
      imgs:
        type: array
        items:
          type: string
  reservation:
    properties:
      reservation_id:
        type: integer
      user_id:
        type: integer
      hotel_id:
        type: integer
      room_id:
        type: integer
      num:
        type: integer
      checkin:
        type: string
      checkout:
        type: string
  request:
    properties:
      request_id:
        type: integer
      user_id:
        type: integer
      hotel_id:
        type: integer
